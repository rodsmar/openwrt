--- a/mt76.h
+++ b/mt76.h
@@ -33,6 +33,9 @@

 #define MT76_TOKEN_FREE_THR    64

+#define MT76_WED_WDS_MIN    256
+#define MT76_WED_WDS_MAX    272
+
 #define MT_QFLAG_WED_RING      GENMASK(1, 0)
 #define MT_QFLAG_WED_TYPE      GENMASK(4, 2)
 #define MT_QFLAG_WED           BIT(5)
--- a/mt7915/debugfs.c
+++ b/mt7915/debugfs.c
@@ -1389,7 +1389,7 @@ static ssize_t mt7915_sta_fixed_rate_set

 out:
        vif = container_of((void *)msta->vif, struct ieee80211_vif, drv_priv);
-       ret = mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, &phy, field);
+       ret = mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, &msta->wcid, &phy, field);
        if (ret)
                return -EFAULT;

--- a/mt7915/mac.c
+++ b/mt7915/mac.c
@@ -1994,7 +1994,7 @@ void mt7915_mac_sta_rc_work(struct work_
                if (changed & (IEEE80211_RC_SUPP_RATES_CHANGED |
                               IEEE80211_RC_NSS_CHANGED |
                               IEEE80211_RC_BW_CHANGED))
-                       mt7915_mcu_add_rate_ctrl(dev, vif, sta, true);
+                       mt7915_mcu_add_rate_ctrl(dev, vif, sta, &msta->wcid, true);

                if (changed & IEEE80211_RC_SMPS_CHANGED)
                        mt7915_mcu_add_smps(dev, vif, sta);
--- a/mt7915/main.c
+++ b/mt7915/main.c
@@ -795,7 +795,13 @@ int mt7915_mac_sta_add(struct mt76_dev *
        bool ext_phy = mvif->phy != &dev->phy;
        int idx;

-       idx = mt76_wcid_alloc(dev->mt76.wcid_mask, MT7915_WTBL_STA);
+       if (mtk_wed_device_active(&dev->mt76.mmio.wed) &&
+           !is_mt7915(&dev->mt76) &&
+           test_bit(MT_WCID_FLAG_4ADDR, &msta->wcid.flags))
+               idx = __mt76_wcid_alloc(mdev->wcid_mask, MT76_WED_WDS_MIN,
+                                       MT76_WED_WDS_MAX);
+       else
+               idx = mt76_wcid_alloc(mdev->wcid_mask, MT7915_WTBL_STA);
        if (idx < 0)
                return -ENOSPC;

@@ -884,7 +890,7 @@ int mt7915_mac_sta_event(struct mt76_dev
                addr = mt7915_mac_wtbl_lmac_addr(dev, msta->wcid.idx, 30);
                mt76_rmw_field(dev, addr, GENMASK(7, 0), 0xa0);

-               ret = mt7915_mcu_add_rate_ctrl(dev, vif, sta, false);
+               ret = mt7915_mcu_add_rate_ctrl(dev, vif, sta, &msta->wcid, false);
                if (ret)
                        return ret;

@@ -1314,6 +1320,40 @@ mt7915_set_bitrate_mask(struct ieee80211
        return 0;
 }

+static void mt7915_sta_wed_set_4addr(struct mt7915_dev *dev, struct ieee80211_vif *vif,
+                                    struct ieee80211_sta *sta)
+{
+       struct mt7915_sta *msta = (struct mt7915_sta *)sta->drv_priv;
+       int min = MT76_WED_WDS_MIN, max = MT76_WED_WDS_MAX;
+       int idx, prev_idx = msta->wcid.idx;
+       struct mt76_wcid wcid = msta->wcid;
+       int state;
+
+       if (!is_mt7915(&dev->mt76))
+               return;
+
+       if (msta->wcid.idx >= min && msta->wcid.idx < max)
+               return;
+
+       idx = __mt76_wcid_alloc(dev->mt76.wcid_mask, min, max);
+       if (idx < 0)
+               return;
+
+       wcid.idx = idx;
+       state = msta->wcid.sta ? CONN_STATE_PORT_SECURE : CONN_STATE_DISCONNECT;
+       __mt7915_mcu_add_sta(dev, vif, sta, &wcid, state, true);
+       mt7915_mcu_add_rate_ctrl(dev, vif, sta, &wcid, false);
+       rcu_assign_pointer(dev->mt76.wcid[idx], &msta->wcid);
+       msta->wcid.idx = idx;
+
+       synchronize_rcu();
+
+       rcu_assign_pointer(dev->mt76.wcid[prev_idx], NULL);
+       mt76_wcid_mask_clear(dev->mt76.wcid_mask, prev_idx);
+       wcid.idx = prev_idx;
+       __mt7915_mcu_add_sta(dev, vif, sta, &wcid, CONN_STATE_DISCONNECT, false);
+}
+
 static void mt7915_sta_set_4addr(struct ieee80211_hw *hw,
                                 struct ieee80211_vif *vif,
                                 struct ieee80211_sta *sta,
@@ -1327,6 +1367,9 @@ static void mt7915_sta_set_4addr(struct
        else
                clear_bit(MT_WCID_FLAG_4ADDR, &msta->wcid.flags);

+       if (mtk_wed_device_active(&dev->mt76.mmio.wed) && enabled)
+               mt7915_sta_wed_set_4addr(dev, vif, sta);
+
        if (!msta->wcid.sta)
                return;

@@ -1776,15 +1819,19 @@ mt7915_net_fill_forward_path(struct ieee
        if (!mtk_wed_device_active(wed))
                return -ENODEV;

-       if (msta->wcid.idx > 0xff)
+       if (msta->wcid.idx > MT7915_WTBL_STA)
                return -EIO;

        path->type = DEV_PATH_MTK_WDMA;
        path->dev = ctx->dev;
        path->mtk_wdma.wdma_idx = wed->wdma_idx;
        path->mtk_wdma.bss = mvif->mt76.idx;
-       path->mtk_wdma.wcid = is_mt7915(&dev->mt76) ? msta->wcid.idx : 0x3ff;
        path->mtk_wdma.queue = phy != &dev->phy;
+       if (test_bit(MT_WCID_FLAG_4ADDR, &msta->wcid.flags) ||
+           is_mt7915(&dev->mt76))
+               path->mtk_wdma.wcid = msta->wcid.idx;
+       else
+               path->mtk_wdma.wcid = 0x3ff;

        ctx->dev = NULL;

--- a/mt7915/mcu.c
+++ b/mt7915/mcu.c
@@ -1449,6 +1449,7 @@ mt7915_mcu_get_mmps_mode(enum ieee80211_
 int mt7915_mcu_set_fixed_rate_ctrl(struct mt7915_dev *dev,
                                   struct ieee80211_vif *vif,
                                   struct ieee80211_sta *sta,
+                                  struct mt76_wcid *wcid,
                                   void *data, u32 field)
 {
        struct mt7915_vif *mvif = (struct mt7915_vif *)vif->drv_priv;
@@ -1520,7 +1521,7 @@ int mt7915_mcu_add_smps(struct mt7915_de
        if (ret)
                return ret;

-       return mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, NULL,
+       return mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, &msta->wcid, NULL,
                                              RATE_PARAM_MMPS_UPDATE);
 }

@@ -1529,17 +1530,19 @@ mt7915_mcu_set_spe_idx(struct mt7915_dev
                       struct ieee80211_sta *sta)
 {
        struct mt7915_vif *mvif = (struct mt7915_vif *)vif->drv_priv;
+       struct mt7915_sta *msta = (struct mt7915_sta *)sta->drv_priv;
        struct mt76_phy *mphy = mvif->phy->mt76;
        u8 spe_idx = mt76_connac_spe_idx(mphy->antenna_mask);

-       return mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, &spe_idx,
-                                             RATE_PARAM_SPE_UPDATE);
+       return mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, &msta->wcid,
+                                             &spe_idx, RATE_PARAM_SPE_UPDATE);
 }

 static int
 mt7915_mcu_add_rate_ctrl_fixed(struct mt7915_dev *dev,
                               struct ieee80211_vif *vif,
-                              struct ieee80211_sta *sta)
+                              struct ieee80211_sta *sta,
+                              struct mt76_wcid *wcid)
 {
        struct mt7915_vif *mvif = (struct mt7915_vif *)vif->drv_priv;
        struct cfg80211_chan_def *chandef = &mvif->phy->mt76->chandef;
@@ -1587,7 +1590,7 @@ mt7915_mcu_add_rate_ctrl_fixed(struct mt

        /* fixed single rate */
        if (nrates == 1) {
-               ret = mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, &phy,
+               ret = mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, wcid, &phy,
                                                     RATE_PARAM_FIXED_MCS);
                if (ret)
                        return ret;
@@ -1609,7 +1612,7 @@ mt7915_mcu_add_rate_ctrl_fixed(struct mt
                else
                        mt76_rmw_field(dev, addr, GENMASK(15, 12), phy.sgi);

-               ret = mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, &phy,
+               ret = mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, wcid, &phy,
                                                     RATE_PARAM_FIXED_GI);
                if (ret)
                        return ret;
@@ -1617,7 +1620,7 @@ mt7915_mcu_add_rate_ctrl_fixed(struct mt

        /* fixed HE_LTF */
        if (mask->control[band].he_ltf != GENMASK(7, 0)) {
-               ret = mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, &phy,
+               ret = mt7915_mcu_set_fixed_rate_ctrl(dev, vif, sta, wcid, &phy,
                                                     RATE_PARAM_FIXED_HE_LTF);
                if (ret)
                        return ret;
@@ -1730,15 +1733,14 @@ mt7915_mcu_sta_rate_ctrl_tlv(struct sk_b
 }

 int mt7915_mcu_add_rate_ctrl(struct mt7915_dev *dev, struct ieee80211_vif *vif,
-                            struct ieee80211_sta *sta, bool changed)
+                            struct ieee80211_sta *sta, struct mt76_wcid *wcid,
+                            bool changed)
 {
        struct mt7915_vif *mvif = (struct mt7915_vif *)vif->drv_priv;
-       struct mt7915_sta *msta = (struct mt7915_sta *)sta->drv_priv;
        struct sk_buff *skb;
        int ret;

-       skb = mt76_connac_mcu_alloc_sta_req(&dev->mt76, &mvif->mt76,
-                                           &msta->wcid);
+       skb = mt76_connac_mcu_alloc_sta_req(&dev->mt76, &mvif->mt76, wcid);
        if (IS_ERR(skb))
                return PTR_ERR(skb);

@@ -1763,7 +1765,7 @@ int mt7915_mcu_add_rate_ctrl(struct mt79
         * and updates as peer fixed rate parameters, which overrides
         * sta_rec_ra and firmware rate control algorithm.
         */
-       return mt7915_mcu_add_rate_ctrl_fixed(dev, vif, sta);
+       return mt7915_mcu_add_rate_ctrl_fixed(dev, vif, sta, wcid);
 }

 static int
@@ -1794,8 +1796,9 @@ mt7915_mcu_add_group(struct mt7915_dev *
                                 sizeof(req), true);
 }

-int mt7915_mcu_add_sta(struct mt7915_dev *dev, struct ieee80211_vif *vif,
-                      struct ieee80211_sta *sta, int conn_state, bool newly)
+int __mt7915_mcu_add_sta(struct mt7915_dev *dev, struct ieee80211_vif *vif,
+                        struct ieee80211_sta *sta,  struct mt76_wcid *wcid,
+                        int conn_state, bool newly)
 {
        struct mt7915_vif *mvif = (struct mt7915_vif *)vif->drv_priv;
        struct ieee80211_link_sta *link_sta;
@@ -1805,9 +1808,10 @@ int mt7915_mcu_add_sta(struct mt7915_dev

        msta = sta ? (struct mt7915_sta *)sta->drv_priv : &mvif->sta;
        link_sta = sta ? &sta->deflink : NULL;
+       if (!wcid)
+               wcid = &msta->wcid;

-       skb = mt76_connac_mcu_alloc_sta_req(&dev->mt76, &mvif->mt76,
-                                           &msta->wcid);
+       skb = mt76_connac_mcu_alloc_sta_req(&dev->mt76, &mvif->mt76, wcid);
        if (IS_ERR(skb))
                return PTR_ERR(skb);

@@ -2503,10 +2507,20 @@ int mt7915_mcu_init_firmware(struct mt79

        mt76_connac_mcu_del_wtbl_all(&dev->mt76);

-       if ((mtk_wed_device_active(&dev->mt76.mmio.wed) &&
-            is_mt7915(&dev->mt76)) ||
-           !mtk_wed_get_rx_capa(&dev->mt76.mmio.wed))
-               mt7915_mcu_wa_cmd(dev, MCU_WA_PARAM_CMD(CAPABILITY), 0, 0, 0);
+#if IS_ENABLED(CONFIG_NET_MEDIATEK_SOC_WED)
+       if (mtk_wed_device_active(&dev->mt76.mmio.wed)) {
+               if (is_mt7915(&dev->mt76) ||
+                   !mtk_wed_get_rx_capa(&dev->mt76.mmio.wed))
+                       ret = mt7915_mcu_wa_cmd(dev, MCU_WA_PARAM_CMD(CAPABILITY),
+                                               0, 0, 0);
+               else
+                       ret = mt7915_mcu_wa_cmd(dev, MCU_WA_PARAM_CMD(SET),
+                                               MCU_WA_PARAM_WED_VERSION,
+                                               dev->mt76.mmio.wed.rev_id, 0);
+               if (ret)
+                       return ret;
+       }
+#endif

        ret = mt7915_mcu_set_mwds(dev, 1);
        if (ret)
--- a/mt7915/mcu.h
+++ b/mt7915/mcu.h
@@ -293,6 +293,7 @@ enum {
        MCU_WA_PARAM_CPU_UTIL = 0x0b,
        MCU_WA_PARAM_RED = 0x0e,
        MCU_WA_PARAM_BSS_ACQ_PKT_CNT = 0x12,
+       MCU_WA_PARAM_WED_VERSION = 0x32,
        MCU_WA_PARAM_RED_SETTING = 0x40,
 };

--- a/mt7915/mt7915.h
+++ b/mt7915/mt7915.h
@@ -459,8 +459,16 @@ int mt7915_mcu_add_dev_info(struct mt791
                            struct ieee80211_vif *vif, bool enable);
 int mt7915_mcu_add_bss_info(struct mt7915_phy *phy,
                            struct ieee80211_vif *vif, int enable);
-int mt7915_mcu_add_sta(struct mt7915_dev *dev, struct ieee80211_vif *vif,
-                      struct ieee80211_sta *sta, int conn_state, bool newly);
+int __mt7915_mcu_add_sta(struct mt7915_dev *dev, struct ieee80211_vif *vif,
+                        struct ieee80211_sta *sta, struct mt76_wcid *wcid,
+                        int conn_state, bool newly);
+static inline int
+mt7915_mcu_add_sta(struct mt7915_dev *dev, struct ieee80211_vif *vif,
+                  struct ieee80211_sta *sta, int conn_state, bool newly)
+{
+    return __mt7915_mcu_add_sta(dev, vif, sta, NULL, conn_state, newly);
+}
+
 int mt7915_mcu_add_tx_ba(struct mt7915_dev *dev,
                         struct ieee80211_ampdu_params *params,
                         bool add);
@@ -476,7 +484,8 @@ int mt7915_mcu_add_beacon(struct ieee802
 int mt7915_mcu_add_obss_spr(struct mt7915_phy *phy, struct ieee80211_vif *vif,
                            struct ieee80211_he_obss_pd *he_obss_pd);
 int mt7915_mcu_add_rate_ctrl(struct mt7915_dev *dev, struct ieee80211_vif *vif,
-                            struct ieee80211_sta *sta, bool changed);
+                            struct ieee80211_sta *sta, struct mt76_wcid *wcid,
+                            bool changed);
 int mt7915_mcu_add_smps(struct mt7915_dev *dev, struct ieee80211_vif *vif,
                        struct ieee80211_sta *sta);
 int mt7915_set_channel(struct mt76_phy *mphy);
@@ -486,6 +495,7 @@ int mt7915_mcu_update_edca(struct mt7915
 int mt7915_mcu_set_fixed_rate_ctrl(struct mt7915_dev *dev,
                                   struct ieee80211_vif *vif,
                                   struct ieee80211_sta *sta,
+                                  struct mt76_wcid *wcid,
                                   void *data, u32 field);
 int mt7915_mcu_set_eeprom(struct mt7915_dev *dev);
 int mt7915_mcu_get_eeprom(struct mt7915_dev *dev, u32 offset, u8 *read_buf);
--- a/util.c
+++ b/util.c
@@ -42,12 +42,19 @@ bool ____mt76_poll_msec(struct mt76_dev
 }
 EXPORT_SYMBOL_GPL(____mt76_poll_msec);

-int mt76_wcid_alloc(u32 *mask, int size)
+int __mt76_wcid_alloc(u32 *mask, int min, int size)
 {
+       u32 min_mask = ~0;
        int i, idx = 0, cur;

+       mask += min / 32;
+       min %= 32;
+       if (min > 0)
+               min_mask = ~((1 << min) - 1);
+
        for (i = 0; i < DIV_ROUND_UP(size, 32); i++) {
-               idx = ffs(~mask[i]);
+               idx = ffs(~mask[i] & min_mask);
+               min_mask = ~0;
                if (!idx)
                        continue;

@@ -62,7 +69,7 @@ int mt76_wcid_alloc(u32 *mask, int size)

        return -1;
 }
-EXPORT_SYMBOL_GPL(mt76_wcid_alloc);
+EXPORT_SYMBOL_GPL(__mt76_wcid_alloc);

 int mt76_get_min_avg_rssi(struct mt76_dev *dev, u8 phy_idx)
 {
--- a/util.h
+++ b/util.h
@@ -27,7 +27,12 @@ enum {
 #define MT76_INCR(_var, _size) \
        (_var = (((_var) + 1) % (_size)))

-int mt76_wcid_alloc(u32 *mask, int size);
+int __mt76_wcid_alloc(u32 *mask, int min, int size);
+
+static inline int mt76_wcid_alloc(u32 *mask, int size)
+{
+       return __mt76_wcid_alloc(mask, 0, size);
+}

 static inline void
 mt76_wcid_mask_set(u32 *mask, int idx)